---
import Layout from "../../layouts/Layout.astro";
import ComponentDoc from "../../components/ComponentDoc.astro";
import SwitchComponent from "../../components/Switch.astro";

const switchCode = `<Switch
  id="dark-mode"
  name="theme-toggle"
  label="Dark Mode"
  checked={false}
/>`;
---

<Layout title="Switch Component">
  <ComponentDoc
    componentName="Switch"
    usage={{
      dos: `
        <ul>
          <li>Use for binary settings (on or off) that take immediate effect</li>
          <li>Provide clear, concise labels</li>
        </ul>
      `,
      donts: `
        <ul>
          <li>Don&rsquo;t use for actions that require confirmation</li>
          <li>Don&rsquo;t use for multiple options (use radio buttons instead)</li>
          <li>Don&rsquo;t use for settings that don&rsquo;t take immediate effect</li>
          <li>Don&rsquo;t use for destructive actions</li>
        </ul>
      `,
    }}
    accessibility={{
      keyboardNav: `
        <ul>
          <li><kbd>Tab</kbd> key moves focus to the switch</li>
          <li><kbd>Space</kbd> toggles the switch state</li>
          <li>Switch can be activated by clicking both the control and the label</li>
        </ul>
      `,
      screenReaders: `
        <ul>
          <li>The switch context is announced to screen readers</li>
          <li>Uses standard checkbox input with an associated label</li>
          <li>Uses <code>role="switch"</code> to indicate the switch&rsquo;s binary state</li>
          <li>The visual control element has <code>aria-hidden</code> to avoid verbose announcements</li>
        </ul>
      `,
    }}
    code={switchCode}
  >
    <div class="doc-demo-stack">
      <SwitchComponent
        id="verdana-theme"
        name="theme-toggle"
        label="Verdana Theme"
        checked={false}
      />
    </div>
  </ComponentDoc>
</Layout>

<script>
  function initThemeSwitch() {
    const themeSwitch = document.getElementById("verdana-theme");
    
    // Wait for global theme manager to be available
    const initializeSwitch = () => {
      if (window.themeManager && themeSwitch) {
        // Set initial state based on global theme manager
        themeSwitch.checked = window.themeManager.getSavedState();
        
        // Listen for switch changes and update global theme
        themeSwitch.addEventListener("change", (event) => {
          const target = event.target;
          window.themeManager.toggleTheme(target.checked);
        });
        
        // Listen for theme changes from other sources (other tabs, etc.)
        document.addEventListener("theme-changed", (event) => {
          themeSwitch.checked = event.detail.verdanaActive;
        });
      } else {
        // Retry if theme manager isn't ready yet
        setTimeout(initializeSwitch, 10);
      }
    };
    
    initializeSwitch();
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initThemeSwitch);
  } else {
    initThemeSwitch();
  }
</script>
