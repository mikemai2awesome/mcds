---
import Layout from "../../layouts/Layout.astro";
import ComponentDoc from "../../components/ComponentDoc.astro";
import SwitchComponent from "../../components/Switch.astro";

const switchCode = `<Switch
  id="dark-mode"
  name="theme-toggle"
  label="Dark Mode"
  checked={false}
/>`;
---

<Layout title="Switch Component">
  <ComponentDoc
    componentName="Switch"
    usage={{
      dos: `
        <ul>
          <li>Use for binary settings (on or off) that take immediate effect</li>
          <li>Provide clear, concise labels</li>
        </ul>
      `,
      donts: `
        <ul>
          <li>Don&rsquo;t use for actions that require confirmation</li>
          <li>Don&rsquo;t use for multiple options (use radio buttons instead)</li>
          <li>Don&rsquo;t use for settings that don&rsquo;t take immediate effect</li>
          <li>Don&rsquo;t use for destructive actions</li>
        </ul>
      `,
    }}
    accessibility={{
      keyboardNav: `
        <ul>
          <li><kbd>Tab</kbd> key moves focus to the switch</li>
          <li><kbd>Space</kbd> toggles the switch state</li>
          <li>Switch can be activated by clicking both the control and the label</li>
        </ul>
      `,
      screenReaders: `
        <ul>
          <li>The switch context is announced to screen readers</li>
          <li>Uses standard checkbox input with an associated label</li>
          <li>Uses <code>role="switch"</code> to indicate the switch&rsquo;s binary state</li>
          <li>The visual control element has <code>aria-hidden</code> to avoid verbose announcements</li>
        </ul>
      `,
    }}
    code={switchCode}
  >
    <div class="doc-demo-stack">
      <SwitchComponent
        id="verdana-theme"
        name="theme-toggle"
        label="Verdana Theme"
        checked={false}
      />
    </div>
  </ComponentDoc>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeSwitch = document.getElementById("verdana-theme") as HTMLInputElement;
    const htmlElement = document.documentElement;
    
    // Check if verdana theme is currently active
    function isVerdanaThemeActive() {
      return htmlElement.getAttribute("data-theme") === "verdana";
    }
    
    // Initialize switch state based on current theme
    function initializeSwitchState() {
      const savedTheme = localStorage.getItem("verdana-theme");
      const shouldBeChecked = savedTheme === "true" || isVerdanaThemeActive();
      
      if (themeSwitch) {
        themeSwitch.checked = shouldBeChecked;
        toggleTheme(shouldBeChecked, false); // Apply theme without saving to avoid redundancy
      }
    }
    
    // Toggle theme function
    function toggleTheme(isChecked: boolean, save: boolean = true) {
      if (isChecked) {
        htmlElement.setAttribute("data-theme", "verdana");
      } else {
        htmlElement.removeAttribute("data-theme");
      }
      
      if (save) {
        localStorage.setItem("verdana-theme", isChecked.toString());
      }
    }
    
    // Listen for switch changes
    if (themeSwitch) {
      themeSwitch.addEventListener("change", (event) => {
        const target = event.target as HTMLInputElement;
        toggleTheme(target.checked);
      });
    }
    
    // Initialize on page load
    initializeSwitchState();
  });
</script>
