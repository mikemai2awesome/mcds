---
interface AccordionItem {
  id?: string;
  title?: string;
  heading?: string;
  content: string;
  open?: boolean;
}

interface Props {
  items: AccordionItem[];
  allowMultiple?: boolean;
}

const { items, allowMultiple = false } = Astro.props;
const accordionId = `accordion-${Math.floor(Math.random() * 1000)}`;

// Process items to ensure each has an id and handle heading/title properties
const processedItems = items.map((item, index) => {
  return {
    ...item,
    id: item.id || `item-${index}`,
    title: item.title || item.heading || "Section",
  };
});
---

<div
  class="mc-accordion"
  id={accordionId}
  data-allow-multiple={allowMultiple.toString()}
>
  {
    processedItems.map((item) => (
      <div class="mc-accordion__item">
        <button
          class="mc-accordion__button"
          id={`accordion-header-${item.id}`}
          aria-expanded={item.open ? "true" : "false"}
        >
          <svg
            aria-hidden="true"
            class="mc-accordion__icon"
            viewBox="0 0 448 512"
            width="16"
            height="16"
          >
            <path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z" />
          </svg>
          {item.title}
        </button>
        <div
          id={`accordion-panel-${item.id}`}
          class="mc-accordion__panel"
          role="region"
          aria-labelledby={`accordion-header-${item.id}`}
          hidden={!item.open}
        >
          <div class="mc-accordion__content" set:html={item.content} />
        </div>
      </div>
    ))
  }
</div>

<style>
  @layer components {
    .mc-accordion {
      --_icon-size: 1.5cap;
      --_icon-header-gap: calc(var(--gutter) / 2);
      --_padding-inline: calc(var(--gutter) / 2);
      margin-block-start: var(--stack);
      border: 1px solid;
    }

    .mc-accordion__item + .mc-accordion__item {
      border-block-start: 1px solid;
    }

    .mc-accordion__button {
      display: grid;
      grid-template-columns: auto 1fr;
      align-items: center;
      gap: var(--_icon-header-gap);
      inline-size: 100%;
      padding-block: var(--stack);
      padding-inline: var(--_padding-inline);
      background: none;
      border: none;
      text-align: start;
      font-weight: bold;
    }

    .mc-accordion__icon {
      inline-size: var(--_icon-size);
      max-inline-size: var(--_icon-size);
    }

    .mc-accordion__button[aria-expanded="true"] .mc-accordion__icon {
      fill: crimson;
      transform: rotate(135deg);
    }

    /* Panel styles */
    .mc-accordion__panel {
      overflow: hidden;
    }

    .mc-accordion__content {
      padding-block-end: var(--stack);
      padding-inline-start: calc(
        var(--_icon-header-gap) + var(--_padding-inline) + var(--_icon-size) +
          0.1ch
      );
      padding-inline-end: var(--_padding-inline);
      transform-origin: block-start;
    }

    @media (prefers-reduced-motion: no-preference) {
      .mc-accordion__icon {
        transition: transform var(--transition);
      }
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const accordions = document.querySelectorAll(".mc-accordion");

    accordions.forEach((accordion) => {
      const allowMultiple =
        accordion.getAttribute("data-allow-multiple") === "true";
      const buttons = accordion.querySelectorAll(".mc-accordion__button");

      buttons.forEach((button) => {
        button.addEventListener("click", () => {
          const expanded = button.getAttribute("aria-expanded") === "true";
          const buttonId = button.getAttribute("id");
          const itemId = buttonId
            ? buttonId.replace("accordion-header-", "")
            : "";
          const panelId = `accordion-panel-${itemId}`;
          const panel = document.getElementById(panelId);

          // Close other panels if not allowing multiple open
          if (!expanded && !allowMultiple) {
            buttons.forEach((otherButton) => {
              if (otherButton !== button) {
                otherButton.setAttribute("aria-expanded", "false");
                const otherButtonId = otherButton.getAttribute("id");
                const otherItemId = otherButtonId
                  ? otherButtonId.replace("accordion-header-", "")
                  : "";
                const otherPanelId = `accordion-panel-${otherItemId}`;
                const otherPanel = document.getElementById(otherPanelId);
                if (otherPanel) {
                  otherPanel.hidden = true;
                }
              }
            });
          }

          // Toggle this panel
          button.setAttribute("aria-expanded", (!expanded).toString());
          if (panel) {
            panel.hidden = expanded;

            // If expanding panel, check if it has interactive elements
            if (!expanded) {
              // Small delay to ensure DOM is updated
              setTimeout(() => {
                // Check if panel has interactive elements like buttons, links, inputs, etc.
                const interactiveElements = panel.querySelectorAll(
                  'a, button, input, select, textarea, [tabindex]:not([tabindex="-1"])',
                );

                // If no interactive elements, move focus to the panel
                if (interactiveElements.length === 0) {
                  panel.setAttribute("tabindex", "-1");
                  panel.focus();
                }
              }, 50);
            }
          }
        });
      });
    });
  });
</script>
