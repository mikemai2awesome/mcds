---
import type { SwitchProps } from "../schemas/component-types.js";
import { componentSchemas } from "../schemas/component-schemas.js";

interface Props extends SwitchProps {}

const switchSchema = componentSchemas.Switch?.props ?? [];
const checkedDefault = switchSchema.find(p => p.name === 'checked')?.default === 'true';

const { label, id, name, checked = checkedDefault } = Astro.props;
---

<div class="mc-switch">
  <input
    type="checkbox"
    role="switch"
    class="mc-switch__input"
    id={id}
    name={name}
    checked={checked}
  />
  <span class="mc-switch__control" aria-hidden="true"></span>
  <label for={id} class="mc-switch__label">{label}</label>
</div>

<style>
  @layer components {
    .mc-switch {
      --_gap: calc(var(--gutter) / 4);
      --_circle-size: 3cap;
      --_border-size: 2px;
      display: inline-flex;
      align-items: center;
      position: relative;
    }

    .mc-switch__input {
      position: absolute;
      inset-block-start: 0;
      inset-inline-start: 0;
      inline-size: calc(var(--_circle-size) * 2 - var(--_gap) * 2);
      block-size: 100%;
      appearance: none;
      border: 0;
      outline: none;
    }

    .mc-switch__control {
      position: relative;
      display: inline-block;
      inline-size: calc(var(--_circle-size) * 2);
      block-size: calc(var(--_circle-size));
      border: var(--_border-size) solid;
      border-radius: 100em;
      transition: background-color var(--transition);
      pointer-events: none;
    }

    .mc-switch:focus-within .mc-switch__control {
      outline: var(--focus-outline);
      outline-offset: var(--focus-outline-offset);
    }

    .mc-switch__control::before {
      content: "\00D7";
      display: flex;
      align-items: center;
      justify-content: center;
      position: absolute;
      inset-block-start: calc(var(--_border-size) * -1);
      inset-inline-end: calc(var(--_border-size) * -1);
      inline-size: var(--_circle-size);
      block-size: var(--_circle-size);
      font-variant: small-caps;
      background-color: canvas;
      border: calc(var(--_border-size) * 1) solid;
      border-radius: 100em;
      transform: translateX(-100%);
    }

    .mc-switch__input:checked + .mc-switch__control {
      background-color: crimson;
    }

    .mc-switch__input:checked + .mc-switch__control::before {
      content: "\2713";
      transform: translateX(0) rotate(360deg);
    }

    @media (prefers-reduced-motion: no-preference) {
      .mc-switch__control::before {
        transition: transform var(--transition);
        will-change: transform;
      }
    }

    .mc-switch__label {
      padding-inline-start: var(--_gap);
      font: inherit;
    }
  }
</style>

<script>
  function initSwitches() {
    // Optionally add JavaScript for advanced functionality
    const switches = document.querySelectorAll(".mc-switch__input");

    switches.forEach((switchInput) => {
      switchInput.addEventListener("change", () => {
        // You could trigger events or store state here
        const isChecked = (switchInput as HTMLInputElement).checked;
        const switchId = switchInput.id;

        // Example: Dispatch a custom event
        const event = new CustomEvent("switch-change", {
          detail: { id: switchId, checked: isChecked },
        });
        document.dispatchEvent(event);
      });
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initSwitches);
  } else {
    initSwitches();
  }
</script>
