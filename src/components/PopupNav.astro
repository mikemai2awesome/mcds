---
interface Link {
  label: string;
  href: string;
  description?: string;
  current?: boolean;
}

interface Group {
  id?: string;
  title?: string;
  links: Link[];
}

interface Props {
  label: string;
  groups: Group[];
}

const { label, groups } = Astro.props;
const popupId = `popup-nav-${Math.floor(Math.random() * 1000)}`;

// Process groups to ensure IDs are available when titles are present
const processedGroups = groups.map((group, index) => {
  if (group.title && !group.id) {
    return {
      ...group,
      id: `group-${index}`,
    };
  }
  return group;
});
---

<div class="mc-popup-nav">
  <button
    class="mc-popup-nav__trigger js-popup-nav__trigger"
    aria-expanded="false"
    data-popup-id={popupId}
  >
    {label}
    <svg aria-hidden="true" viewBox="0 0 448 512" width="16" height="16">
      <path
        d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"
      ></path>
    </svg>
  </button>

  <div id={popupId} class="mc-popup-nav__content" hidden>
    <div class="mc-popup-nav__grid">
      {
        processedGroups.map((group) => (
          <div class="mc-popup-nav__group">
            {group.title && group.id && (
              <p
                id={`group-title-${group.id}`}
                class="mc-popup-nav__group-title"
              >
                {group.title}
              </p>
            )}
            <ul
              class="mc-popup-nav__list"
              role="list"
              aria-labelledby={
                group.title && group.id ? `group-title-${group.id}` : undefined
              }
            >
              {group.links.map((link) => (
                <li class="mc-popup-nav__item">
                  <a
                    href={link.href}
                    aria-current={link.current ? "page" : undefined}
                    class="mc-popup-nav__link"
                  >
                    {link.label}
                    <svg
                      aria-hidden="true"
                      viewBox="0 0 320 512"
                      width="24"
                      height="24"
                    >
                      <path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z" />
                    </svg>
                  </a>
                  {link.description && (
                    <span class="mc-popup-nav__link-desc">
                      {link.description}
                    </span>
                  )}
                </li>
              ))}
            </ul>
          </div>
        ))
      }
    </div>
  </div>
</div>

<style>
  @layer components {
    .mc-popup-nav {
      --_degree: 6deg;
      position: relative;
      display: inline-block;
    }

    .mc-popup-nav__trigger {
      display: inline-flex;
      align-items: center;
      gap: calc(var(--gutter) / 3);
      padding-block: calc(var(--stack) / 6);
      padding-inline: calc(var(--gutter) / 3);
      font-family: var(--font-variant);
      font-weight: normal;
      text-decoration: none;
      background: none;
      border: 1px solid;
      border-image-slice: 1;
      border-image-source: linear-gradient(var(--_degree), var(--border-image-source));
    }

    .mc-popup-nav__trigger svg {
      inline-size: 1cap;
      block-size: auto;
    }

    .mc-popup-nav__trigger[aria-expanded="true"] svg {
      fill: crimson;
      transform: rotate(540deg);
    }

    @media (prefers-reduced-motion: no-preference) {
      .mc-popup-nav__trigger svg {
        transition: transform var(--transition);
        will-change: transform;
      }
    }

    @media (any-hover: hover) {
      .mc-popup-nav__trigger:hover {
        --_degree: -6deg;
      }
    }

    .mc-popup-nav__content {
      position: absolute;
      inset-block-start: 100%;
      inset-inline-start: 0;
      inline-size: 80dvi;
      max-inline-size: 30ch;
      max-block-size: 80svb;
      margin-block-start: calc(var(--stack) / 2);
      background-color: canvas;
      border: 1px solid gray;
      overflow-y: auto;
      z-index: 1;
    }

    .mc-popup-nav__grid {
      display: flex;
      flex-direction: column;
      gap: var(--stack);
      padding-block: var(--stack);
      padding-inline: calc(var(--gutter) / 2);
    }

    .mc-popup-nav__group-title {
      font-style: italic;
    }

    .mc-popup-nav__list {
      list-style: none;
      margin-block-start: calc(var(--stack) / 2);
    }

    .mc-popup-nav__item {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      position: relative;
      padding-block: calc(var(--stack) / 2);
      padding-inline: calc(var(--gutter) / 2);
      text-wrap: pretty;
      border: 1px solid transparent;

      & + .mc-popup-nav__item {
        margin-block-start: 1px;
      }
    }

    .mc-popup-nav__link {
      font-family: var(--font-variant);
      font-size: var(--pt-bourgeois);
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1ex;
      text-decoration: none;
    }

    .mc-popup-nav__link::before {
      content: "";
      position: absolute;
      inset: 0;
    }

    @media (any-hover: hover) {
      .mc-popup-nav__item:hover {
        border: 1px dashed;
      }

      .mc-popup-nav__link:hover svg {
        transform: translateX(0.25ch);
      }
    }

    .mc-popup-nav__link svg {
      inline-size: 1cap;
      block-size: auto;
      fill: crimson;
    }

    @media (prefers-reduced-motion: no-preference) {
      .mc-popup-nav__link svg {
        transition: transform var(--transition);
        will-change: transform;
      }
    }

    .mc-popup-nav__link[aria-current]::before {
      border-inline-start: 0.5ch solid;
    }

    .mc-popup-nav__link-desc {
      margin-block-start: calc(var(--stack) / 4);
      font-size: var(--pt-small-pica);
    }
  }
</style>

  <script>
function initPopupNavs() {
  const triggers = document.querySelectorAll(".js-popup-nav__trigger");

  triggers.forEach((trigger) => {
    const popupId = trigger.getAttribute("data-popup-id") || "";
    const popup = document.getElementById(popupId);

    if (!popup) {
      return;
    }

    // Toggle popup
    trigger.addEventListener("click", () => {
      const expanded = trigger.getAttribute("aria-expanded") === "true";

      // Close any other open popups first
      document
        .querySelectorAll(".js-popup-nav__trigger[aria-expanded=\"true\"]")
        .forEach((openTrigger) => {
          if (openTrigger !== trigger) {
            openTrigger.setAttribute("aria-expanded", "false");
            const otherPopupId =
                openTrigger.getAttribute("data-popup-id") || "";
            const otherPopup = document.getElementById(otherPopupId);
            if (otherPopup) {
              otherPopup.hidden = true;
            }
          }
        });

      // Toggle this popup
      trigger.setAttribute("aria-expanded", (!expanded).toString());
      popup.hidden = expanded;

      // Keep focus on trigger button
      if (!expanded) {
        trigger.focus();
      }
    });

    // Close when clicking outside
    document.addEventListener("click", (e) => {
      if (
        trigger.getAttribute("aria-expanded") === "true" &&
          !trigger.contains(e.target) &&
          !popup.contains(e.target)
      ) {
        trigger.setAttribute("aria-expanded", "false");
        popup.hidden = true;
      }
    });

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
          trigger.getAttribute("aria-expanded") === "true"
      ) {
        trigger.setAttribute("aria-expanded", "false");
        popup.hidden = true;
        trigger.focus();
      }
    });
  });
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initPopupNavs);
} else {
  initPopupNavs();
}
</script> 