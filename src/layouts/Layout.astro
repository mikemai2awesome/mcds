---
import { componentSchemas } from '../schemas/component-schemas.js';

interface Props {
  title: string;
  siteName?: string;
}

const { title, siteName = "MCDS" } = Astro.props;
const currentPath = Astro.url.pathname;
const isIndexPage = currentPath === "/" || currentPath === "";

// Helper function to check if a link is the current page
const isCurrentPage = (href: string) => currentPath === href;

// Check if we're on a component documentation page
const isComponentPage = currentPath.startsWith('/components/');
let componentDescription = "A design system built with Astro, MCSS, semantic HTML, and vanilla JavaScript.";

if (isComponentPage) {
  // Extract component name from URL (e.g., '/components/alert' -> 'alert')
  const componentSlug = currentPath.split('/components/')[1]?.replace('/', '');
  
  if (componentSlug) {
    // Convert slug to component name (e.g., 'popup-nav' -> 'PopupNav')
    const componentName = componentSlug
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join('');
    
    // Get component description from schema
    const schema = componentSchemas[componentName];
    if (schema) {
      componentDescription = schema.description;
    }
  }
}

// Dynamically get all component pages
const componentPages = await Astro.glob('../pages/components/*.astro');

// Extract component information and sort alphabetically
const components = componentPages
  .map(page => {
    // Extract filename without extension
    const filename = page.file.split('/').pop()?.replace('.astro', '') || '';
    
    // Convert filename to display name (e.g., 'popup-nav' -> 'Popup Nav')
    const displayName = filename
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
    
    return {
      name: displayName,
      href: `/components/${filename}`,
      filename
    };
  })
  .sort((a, b) => a.name.localeCompare(b.name));

---

<!doctype html>
<html lang="en-us">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    {
      isIndexPage ? (
        <title>{siteName} - Minimalist Design System by Mike Mai</title>
        <meta
          name="description"
          content="A design system built with Astro, MCSS, semantic HTML, and vanilla JavaScript."
        />
      ) : (
        <title>{title} - {siteName}</title>
        <meta
          name="description"
          content={componentDescription}
        />
      )
    }
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    {isIndexPage && (
      <>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Flow+Block&display=swap" rel="stylesheet">
      </>
    )}
  </head>
  <body>
    <a href="#main-content" class="u-skip-link">Skip to main content</a>
    {!isIndexPage && (
      <header class="doc-header">
        <p><a href="/">{siteName}</a></p>
        <nav>
          <ul>
            {components.map(component => (
              <li>
                <a 
                  href={component.href} 
                  aria-current={isCurrentPage(component.href) ? "page" : undefined}
                >
                  {component.name}
                </a>
              </li>
            ))}
          </ul>
        </nav>
      </header>
    )}
    {
      isIndexPage ? (
        <main class="doc-main" id="main-content">
          <slot />
        </main>
      ) : (
        <main id="main-content">
          <slot />
        </main>
      )
    }
    <hr>
    <footer>
      <p><em>The design system is created by <a href="https://mikemai.net">Mike Mai</a> with the help of AI buddy <a href="https://cursor.com">Cursor</a>.</em></p>
    </footer>
  </body>
</html>

<style is:global>
  @import url("../styles/global.css");
</style>

<script>
  // Global theme management
  class ThemeManager {
    private static instance: ThemeManager;
    private htmlElement: HTMLElement;
    private storageKey = "verdana-theme";
    
    constructor() {
      this.htmlElement = document.documentElement;
      this.init();
    }
    
    static getInstance(): ThemeManager {
      if (!ThemeManager.instance) {
        ThemeManager.instance = new ThemeManager();
      }
      return ThemeManager.instance;
    }
    
    private init(): void {
      // Apply saved theme on page load
      this.applySavedTheme();
      
      // Listen for storage changes from other tabs
      window.addEventListener("storage", (event) => {
        if (event.key === this.storageKey) {
          this.applySavedTheme();
          this.notifyThemeChange();
        }
      });
      
      // Listen for custom theme change events
      document.addEventListener("theme-change", () => {
        this.applySavedTheme();
      });
    }
    
    private applySavedTheme(): void {
      const savedTheme = localStorage.getItem(this.storageKey);
      const shouldApplyVerdana = savedTheme === "true";
      
      if (shouldApplyVerdana) {
        this.htmlElement.setAttribute("data-theme", "verdana");
      } else {
        this.htmlElement.removeAttribute("data-theme");
      }
    }
    
    public isVerdanaActive(): boolean {
      return this.htmlElement.getAttribute("data-theme") === "verdana";
    }
    
    public toggleTheme(enable: boolean): void {
      if (enable) {
        this.htmlElement.setAttribute("data-theme", "verdana");
      } else {
        this.htmlElement.removeAttribute("data-theme");
      }
      
      localStorage.setItem(this.storageKey, enable.toString());
      this.notifyThemeChange();
    }
    
    private notifyThemeChange(): void {
      // Dispatch event to notify components of theme change
      const event = new CustomEvent("theme-changed", {
        detail: { verdanaActive: this.isVerdanaActive() }
      });
      document.dispatchEvent(event);
    }
    
    public getSavedState(): boolean {
      return localStorage.getItem(this.storageKey) === "true";
    }
  }
  
  // Initialize theme manager when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    window.themeManager = ThemeManager.getInstance();
  });
  
  // Make ThemeManager available globally for TypeScript
  declare global {
    interface Window {
      themeManager: ThemeManager;
    }
  }
</script>
