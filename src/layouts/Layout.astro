---
import { getCollection, type CollectionEntry } from "astro:content";
import { componentSchemas } from '../schemas/component-schemas.js';

interface Props {
  title: string;
  siteName?: string;
}

const { title, siteName = "MCDS" } = Astro.props;
const currentPath = Astro.url.pathname;
const baseUrl = import.meta.env.BASE_URL;
const isIndexPage = currentPath === baseUrl || currentPath === baseUrl.replace(/\/$/, '') || currentPath === "/" || currentPath === "";

// Helper function to check if a link is the current page
const isCurrentPage = (href: string) => {
  // Normalize paths by removing trailing slashes
  const normalizePath = (path: string) => {
    return path.replace(/\/$/, '') || '/';
  };
  
  const normalizedCurrent = normalizePath(currentPath);
  const normalizedHref = normalizePath(href);
  
  return normalizedCurrent === normalizedHref;
};

// Get all component metadata from content collection
const componentEntries = await getCollection("components");

// Check if we're on a component documentation page
const isComponentPage = currentPath.includes("/components/");
let componentDescription = "A MCDS component.";

if (isComponentPage) {
  // Extract component slug from URL (e.g., '/components/alert' or '/mcds/components/alert' -> 'alert')
  const componentSlug = currentPath.split("/components/")[1]?.replace("/", "");
  
  if (componentSlug) {
    // Find the component entry by slug
    const componentEntry = componentEntries.find(entry => entry.slug === componentSlug);
    if (componentEntry && componentEntry.data.description) {
      componentDescription = componentEntry.data.description;
    } else {
      // Fallback to schema description if available
      const componentName = componentSlug
        .split("-")
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join("");
      
      const schema = componentSchemas[componentName];
      if (schema) {
        componentDescription = schema.description;
      }
    }
  }
}

// Extract component information and sort by order, then alphabetically
const components = componentEntries
  .map((entry: CollectionEntry<"components">) => {
    return {
      name: entry.data.title.replace(" Component", ""), // Remove "Component" suffix for nav
      href: `${import.meta.env.BASE_URL}components/${entry.slug}/`,
      filename: entry.slug,
      order: entry.data.order || 999
    };
  })
  .sort((a: any, b: any) => {
    // Sort by order first, then alphabetically
    if (a.order !== b.order) {
      return a.order - b.order;
    }
    return a.name.localeCompare(b.name);
  });

---

<!doctype html>
<html lang="en-us">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    {
      isIndexPage ? (
        <title>{siteName} - Minimal design system by Mike Mai</title>
        <meta
          name="description"
          content="A design system built with Astro, MCSS, semantic HTML, and vanilla JavaScript. Typography inspired by Matthew Carter fonts."
        />
      ) : (
        <title>{title} - {siteName}</title>
        <meta
          name="description"
          content={componentDescription}
        />
      )
    }
    <link rel="canonical" href="https://mikemai.net/mcds/" />

    <!-- Open Graph -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@mikemai2awesome" />
    <meta name="twitter:creator" content="@mikemai2awesome" />
    <meta property="og:url" content="https://mikemai.net/mcds/" />
    {
      isIndexPage ? (
        <meta property="og:title" content={`${siteName} - Minimalist Design System by Mike Mai`} />
        <meta property="og:description" content="A design system built with Astro, MCSS, semantic HTML, and vanilla JavaScript." />
      ) : (
        <meta property="og:title" content={`${title} - ${siteName}`} />
        <meta property="og:description" content={componentDescription} />
      )
    }
    <meta property="og:locale" content="en_US" />
    <meta property="og:image" content="https://mikemai.net/mcds/og-image.jpg" />
    <meta property="og:image:alt" content="MCDS set in Big Caslon, a typeface by Matthew Carter." />
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="672" />
    <meta property="og:site_name" content="Mike Mai Network" />

    <link rel="me" href="https://github.com/mikemai2awesome" />
    <link rel="me" href="https://mastodon.social/@mikemai2awesome" />
    <link rel="me" href="https://x.com/mikemai2awesome" />

    <!-- Favicons -->
    <link rel="icon" href="https://mikemai.net/favicon.ico" sizes="any" />
    <link rel="icon" href="https://mikemai.net/favicon.svg" type="image/svg+xml" />
    <link rel="apple-touch-icon" sizes="180x180" href="https://mikemai.net/apple-touch-icon.png" />
    <link rel="manifest" href="https://mikemai.net/site.webmanifest" />
    <meta name="msapplication-TileColor" content="#000" />
    <meta name="theme-color" content="#000" />

    <!-- Misc. -->
    <meta name="generator" content={Astro.generator} />
    {isIndexPage && (
      <>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Flow+Block&display=swap" rel="stylesheet">
      </>
    )}
  </head>
  <body>
    {!isIndexPage && (
      <a href="#main-content" class="u-skip-link">Skip to main content</a>
      <header class="doc-header">
        <p><a href={import.meta.env.BASE_URL}>{siteName}</a></p>
        <nav>
          <ul>
            {components.map((component: any) => (
              <li>
                <a 
                  href={component.href} 
                  aria-current={isCurrentPage(component.href) ? "page" : undefined}
                >
                  {component.name}
                </a>
              </li>
            ))}
          </ul>
        </nav>
      </header>
      <hr>  
    )}
    {
      isIndexPage ? (
        <main class="doc-main" id="main-content">
          <slot />
        </main>
      ) : (
        <main id="main-content">
          <slot />
        </main>
      )
    }
    <hr>
    <footer>
      <p><strong>Made by <a href="https://mikemai.net">Mike Mai</a> with the help of AI buddy <a href="https://cursor.com">Cursor</a>.</strong> This is an exercise in typesetting, front-end design, accessibility design, API design, and documentation design. While the HTML and CSS are decent, the Astro code might not be production-ready. <em>Carefully review</em> the code before using it.</p>
    </footer>
  </body>
</html>

<style is:global>
  @import url("../styles/global.css");
</style>

<script>
  // Global theme management
  class ThemeManager {
    static instance: ThemeManager;
    htmlElement: HTMLElement;
    storageKey: string;
    
    constructor() {
      this.htmlElement = document.documentElement;
      this.storageKey = "verdana-theme";
      this.init();
    }
    
    static getInstance() {
      if (!ThemeManager.instance) {
        ThemeManager.instance = new ThemeManager();
      }
      return ThemeManager.instance;
    }
    
    init() {
      // Apply saved theme on page load
      this.applySavedTheme();
      
      // Listen for storage changes from other tabs
      window.addEventListener("storage", (event) => {
        if (event.key === this.storageKey) {
          this.applySavedTheme();
          this.notifyThemeChange();
        }
      });
      
      // Listen for custom theme change events
      document.addEventListener("theme-change", () => {
        this.applySavedTheme();
      });
    }
    
    applySavedTheme() {
      const savedTheme = localStorage.getItem(this.storageKey);
      const shouldApplyVerdana = savedTheme === "true";
      
      if (shouldApplyVerdana) {
        this.htmlElement.setAttribute("data-theme", "verdana");
      } else {
        this.htmlElement.removeAttribute("data-theme");
      }
    }
    
    isVerdanaActive() {
      return this.htmlElement.getAttribute("data-theme") === "verdana";
    }
    
    toggleTheme(enable: boolean) {
      if (enable) {
        this.htmlElement.setAttribute("data-theme", "verdana");
      } else {
        this.htmlElement.removeAttribute("data-theme");
      }
      
      localStorage.setItem(this.storageKey, enable.toString());
      this.notifyThemeChange();
    }
    
    notifyThemeChange() {
      // Dispatch event to notify components of theme change
      const event = new CustomEvent("theme-changed", {
        detail: { verdanaActive: this.isVerdanaActive() },
      });
      document.dispatchEvent(event);
    }
    
    getSavedState() {
      return localStorage.getItem(this.storageKey) === "true";
    }
  }
  
  // Initialize theme manager when DOM is ready
  function initThemeManager() {
    (window as any).themeManager = ThemeManager.getInstance();
  }
  
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initThemeManager);
  } else {
    initThemeManager();
  }
</script>
