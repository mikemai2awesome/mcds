@import url('./mcss.css');

@layer config, resets, elements, components, docs, utilities;

@layer docs {

  /* Write documentation styles here */
  .doc-layout {}

  .doc-container {}

  .doc-sidebar {}

  .doc-sidebar ul {}

  .doc-sidebar a {}

  .doc-main {}

  .doc-demo-stack {
    display: flex;
    flex-direction: column;
    gap: var(--stack);

    >* {
      margin: 0;
    }
  }

  .doc-demo-inline {
    display: flex;
    flex-wrap: wrap;
    gap: calc(var(--gutter) / 2);
    row-gap: var(--stack);

    >* {
      margin: 0;
    }
  }

  .doc-component-example {
    margin-block-start: var(--stack);

    >* {
      margin: 0;
    }
  }

  body:has(.hero) {
    padding-block-start: 0;
  }

  .hero {
    display: grid;
    margin: 0;
    padding-inline: 10vi;
    padding-block-end: var(--page-padding-block);
    color: white;
    background-image: url("https://mikemai.net/mcss/img/mc-hero-edited.jpg");
    background-size: cover;
  }

  .hero:not(:has(h1)) {
    display: flex;
    align-items: baseline;
    justify-content: center;
    gap: var(--gutter);
    padding-block: calc(var(--stack) * 2);

    >* {
      margin: 0;
    }
  }

  .hero h1 {
    display: grid;
    grid-template-areas: "start start" "name description" "emphasis emphasis" "end end";
    grid-template-columns: auto 1fr;
    grid-template-rows: minmax(var(--page-padding-block), 1fr) auto auto var(--stack);
    gap: calc(var(--gutter) / 2);
    row-gap: var(--stack);
    min-block-size: 100svb;
    margin: 0;
    font-size: inherit;
    letter-spacing: 0;
    overflow-wrap: initial;
    hyphens: initial;
  }

  .hero h1::before {
    display: none;
  }

  .hero h1>span {
    display: block;
  }

  .hero h1>.sans {
    font-size: var(--pt-pica);
  }

  .hero h1>.sans:nth-child(1) {
    grid-area: name;
    inline-size: min-content;
    padding-block: 0.5ex;
    padding-inline: 0.5ch;
    text-transform: uppercase;
    writing-mode: vertical-rl;
    white-space: nowrap;
    color: white;
    background-color: crimson;
  }

  .hero h1>.sans:nth-child(2) {
    display: grid;
    place-items: center;
    grid-area: description;
    max-inline-size: 14em;
    line-height: 1.3;
  }

  .hero h1>.serif {
    grid-area: emphasis;
    font-size: clamp(var(--pt-double-canon), 0.5em + 8.5vi, 18rem);
    line-height: 1;
    letter-spacing: -0.025ex;
  }

  .hero p a {
    text-decoration: none;

    @media (any-hover: hover) {
      &:hover {
        text-decoration: underline;
      }
    }
  }

  .hero+hr {
    margin-block-start: 0;
  }

  .pangram {
    margin-block-start: calc(var(--stack) / 2);
  }

  .pangram::before {
    display: none;
  }

  .specimen {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(4ex, 1fr));
    margin-block-start: var(--stack);
    border-inline-start: 1px solid;
    border-block-start: 1px solid;
  }

  @media (forced-colors: none) {
    .specimen {
      border-image-slice: 1;
      border-image-source: linear-gradient(to bottom, gray, rgb(128 128 128 / 40%));
    }
  }

  .specimen>* {
    display: grid;
    place-items: center;
    block-size: 4ex;
    border-inline-end: 1px solid;
    border-block-end: 1px solid;
  }

  @media (forced-colors: none) {
    .specimen>* {
      border-image-slice: inherit;
      border-image-source: linear-gradient(to right, rgb(128 128 128 / 40%), gray, rgb(128 128 128 / 40%));
    }
  }
}

@layer components {

  /* Write component styles in each component file. If you write overrides here, you will be SHAMED! */
}

@layer utilities {

  /* Write utility classes here. */
  .u-margin-none {
    margin: 0;
  }

  .u-visually-hidden:not(:focus):not(:active) {
    position: absolute;
    clip-path: inset(50%);
    overflow: hidden;
    inline-size: 1px;
    block-size: 1px;
    white-space: nowrap;
  }

  .u-serif {
    font-family: Georgia, serif;
  }

  .u-sans {
    font-family: Verdana, system-ui, sans-serif;
    letter-spacing: 0;
  }

  .u-word-break-all {
    word-break: break-all;
  }
}

@layer config {
  :root {
    --transition: 0.3s ease-in-out;
  }
}
